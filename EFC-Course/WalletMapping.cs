using EFC_Course.Entities;
using NHibernate; // This namespace provides access to the NHibernate library
using NHibernate.Mapping.ByCode; // This namespace allows us to define mappings for our entities using code
using NHibernate.Mapping.ByCode.Conformist; // This namespace provides helper classes to simplify code-based mappings

namespace EFC_Course // This line specifies the namespace that this class belongs to
{
    public class WalletMapping : ClassMapping<Wallet> // This class defines the mapping for the Wallet entity
    {
        public WalletMapping() // This is the constructor of the WalletMapping class
        {
            Id(x => x.WalletID, c => // This line defines the mapping for the Id property of the Wallet entity
            {
                c.Generator(Generators.Identity); // This specifies that the Id will be generated by the database using an identity column
                c.Type(NHibernateUtil.Int32); // This sets the data type of the Id property to a 32-bit integer
                c.Column("Id"); // This defines the name of the column in the database table that will store the Id value
                c.UnsavedValue(0); // This specifies the value that will be used for the Id property when a
                                   // new Wallet object is created but not yet saved to the database (typically 0 for identity columns)
            });

            Property(x => x.Holder, c => // This line defines the mapping for the Holder property of the Wallet entity
            {
                c.Length(50); // This sets the maximum length of the Holder property to 50 characters
                c.Type(NHibernateUtil.AnsiString); // This sets the data type of the Holder property to a string
                c.NotNullable(true); // This specifies that the Holder property cannot be null
            });

            Property(x => x.Balance, c => // This line defines the mapping for the Balance property of the Wallet entity
            {
                c.Type(NHibernateUtil.Decimal); // This sets the data type of the Balance property to a decimal number
                c.NotNullable(true); // This specifies that the Balance property cannot be null
            });

            Table("Wallets"); // This line defines the name of the table in the database that will store Wallet entities
        }
    }
}
